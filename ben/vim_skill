j 向下
•30j 向下移动30行
•k 向上
•h 向左
•l 向右
•0 到行首
•^ 到行首第一个字符，如果前面有空格的话
•$ 到行尾
•gg 快速到文件头
•G 快速到文件尾
•100G 跳转到第100行
不建议在插入模式下进行光标移动，这很低效



•yy 复制一行
•10yy 向下复制10行
•yw 复制光标开始的一个单词
•y$ 复制光标到行尾
•yfB 复制光标到第一个大写B中间的内容
•y2fB 复制光标到第二个大写B中间的内容



剪切: x


•x 向剪切一个一个字符，如果是在行尾，则为向前剪切
•3x 剪切三个
•xp 非行尾交换两个字符，如从bs变成sb




删除：d

删除的内容会放到剪贴板，按p即可粘贴到其他地方


•dd 删除一行
•200dd 删除200行
•dw 删除一个单词 （最喜欢啦）
•df” 删除到出现的第一个双引号





粘贴: p


•p 粘贴复制或剪切的内容
•3p 将复制或剪切的内容粘贴三次




命令模式

上面的例子里已经展示了命令模式的进入模式。在普通模式下，输入:即可进入。


•%s/$/sth/ 在行尾追加sth
•%s/\^M//g 替换掉dos换行符，\^M使用ctrl+v + Enter即可输入
•:g/\^\s*$/d 删除空行以及只有空格的行
•%s/#.*//g 删除#之后的字符
没错，命令模式用的是正则，这些经验是通用的

你已经发现了，这大概就是针对编辑器窗口的sed命令。




1) 在命令模式下，执行%s/$/");/g，在行尾追加数据
•2) 按ESC进入普通模式，并使用gg回到行首
•3) 按ctrl+v进入可视化模式，然后按G到文件尾
•4) 不要理会编辑器反应，按I进入插入模式，输入list.add("
•5) 按ESC回到普通模式，可以发现以上输入已经在每一行生效了
块模式还可以完成列的呼唤，貌似在UE里见过此神技。






1) 按下gg到行首
•2) 按下qa进行宏录制，a是我们起的一个标记名称
•3) 按I进入插入模式，输入list.add("
•4) 按ESC进入普通模式，然后按$跳到行尾
•5) 按j进入下一行，然后按^回到行首
•6) 再次按下q结束宏录制
•7) 输入@a触发宏测试一下录制效果
•8) 输入100@a重复宏100次，也就是影响下面的100行 
可以录制不同的多个宏，方面的进行批量操作





另外用的一些比较少的主要功能有


•r 替换字符
•ggVG 全选
•u 恢复更改
•J 合并下一行
•gU 光标处转大写
•ggguG 整篇文章大写转化为小写
•% 跳转到下一个匹配,如在<div>上按%，则跳转到相应的</div>
•:e /tmp/a 在同一个编辑器内打开/tmp/a文件。同一个编辑器的缓冲区是剪贴板是共享的，可以方便在多个文件中复制
•bp 跳转到上一个缓冲区
•bn 跳转到下一个缓冲区







:%s/old/new/g 用old替换new，替换整个文件的所有匹配





:10,20 s/^/ /g 在第10行至第20行每行前面加四个空格，用于缩进。




7. 删除命令

需要说明的是，vim 其实并没有单纯的删除命令，下面你或许理解为剪切更加准确。

以字符为单位删除

x   删除当前字符

3x  删除当前字符3次



X   删除当前字符的前一个字符。

3X  删除当前光标向前三个字符



dl  删除当前字符， dl=x

dh  删除前一个字符，X=dh



D   删除当前字符至行尾。D=d$

d$  删除当前字符至行尾

d^  删除当前字符之前至行首

以单词为单位删除

dw  删除当前字符到单词尾

daw 删除当前字符所在单词

以行为单位删除

dd  删除当前行

dj  删除下一行

dk  删除上一行



dgg  删除当前行至文档首部

d1G  删除当前行至文档首部

dG   删除当前行至文档尾部



kdgg  删除当前行之前所有行（不包括当前行）

jdG   删除当前行之后所有行（不包括当前行）







10d     删除当前行开始的10行。

:1,10d  删除1-10行

:11,$d  删除11行及以后所有的行

:1,$d   删除所有行

J    删除两行之间的空行，实际上是合并两行。


普通模式中使用y复制

yy   复制游标所在的整行（3yy表示复制3行）



y^   复制至行首，或y0。不含光标所在处字符。

y$   复制至行尾。含光标所在处字符。



yw   复制一个单词。

y2w  复制两个单词。



yG   复制至文本末。

y1G  复制至文本开头。

普通模式中使用p粘贴

p(小写)：代表粘贴至光标后（下边，右边）

P(大写)：代表粘贴至光标前（上边，左边）


dd    其实就是剪切命令，剪切当前行

ddp   剪切当前行并粘贴，可实现当前行和下一行调换位置





正常模式下按v（逐字）或V（逐行）进入可视模式

然后用jklh命令移动即可选择某些行或字符，再按d即可剪切



ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴



:1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。



:1, 10 m 20 将第1-10行移动到第20行之后。




fx    找到光标后第一个为x的字符

3fd   找到光标后第三个为d的字符



F   同f，反向查找。

以行为单位移动

# 10指代所有数字，可任意指定

10h  左移10个字符

10l  右移10个字符

10k  上移10行

10j  下移10行




$   移动到行尾  

3$  移动到下面3行的行尾

以单词为单位移动

w  向前移动一个单词（光标停在单词首部）

b  向后移动一个单词

e，同w，只不过是光标停在单词尾部

ge 同b，光标停在单词尾部。

以句为单位移动

(   移动到句首

)   移动到句尾

跳转到文件的首尾

gg  移动到文件头。 = [[  == ``

G   移动到文件尾。 = ]]

其他移动方法

^   移动到本行第一个非空白字符上。

0   移动到本行第一个字符上(可以是空格)

使用 具名标记 跳转，个人感觉这个很好用，因为可以跨文件。

使用 ma ，可以将此处标记为 a，使用 'a 进行跳转

使用 :marks 可以查看所有的标记

使用 :delm！可以删除所有的标记

当在查看错误日志时，正常的步骤是，vim打开文件，然后使用 shift+g 再跳转到最后一行，这里有个更简单的操作可以在打开文件时立即跳到最后一行。只要在 vim 和 文件 中间加个 + 即可。

vim + you.log

举一反三，当你想打开文件立即跳转到指定行时，可以这样

# 打开文件并跳转到 20 行

vim you.log +20

当你使用 / 搜索定位跳转或者使用 :行号 进行精准跳转时，有时我们想返回到上一次的位置，如何实现？

只要使用 Ctrl+o 即可返回上一次的位置。



:set shiftwidth?   查看缩进值

:set shiftwidth=4  设置缩进值为4



# 缩进相关 最好写到配置文件中  ~/.vimrc

:set tabstop=4

:set softtabstop=4

:set shiftwidth=4

:set expandtab



>>   向右缩进

<<   取消缩进

如何你要对代码进行缩进，还可以用 == 对当前行缩进，如果要对多行对待缩进，则使用 n==，这种方式要求你所编辑的文件的扩展名是被vim所识别的，比如.py文件。

排版

:ce   居中

:le   靠左

:ri   靠右



进入命令行模式，按ctrl + v进入 visual block模式，然后按j, 或者k选中多行，把需要注释的行标记起来



按大写字母I，再插入注释符，例如//



按esc键就会全部注释了

取消多行注释

进入命令行模式，按ctrl + v进入 visual block模式，按字母l横向选中列的个数，例如 // 需要选中2列



按字母j，或者k选中注释符号



按d键就可全部取消注释

复杂注释

:3,5 s/^/#/g 注释第3-5行

:3,5 s/^#//g 解除3-5行的注释





:1,$ s/^/#/g 注释整个文档

:1,$ s/^#//g 取消注释整个文档





:%s/^/#/g 注释整个文档，此法更快

:%s/^#//g 取消注释整个文档



"zz"：命令会把当前行置为屏幕正中央，

"zt"：命令会把当前行置于屏幕顶端

"zb"：则把当前行置于屏幕底端.



Ctrl + e 向下滚动一行

Ctrl + y 向上滚动一行



Ctrl + d 向下滚动半屏

Ctrl + u 向上滚动半屏



Ctrl + f 向下滚动一屏

Ctrl + b 向上滚动一屏





【跳到指定行】：两种方法



可以先把行号打开

:set nu  打开行号



:20    跳到第20行

20G    跳到第20行




要进行区域选择，要先进入可视模式



v   以字符为单位，上下左右选择

V   以行为单位，上下选择



选择后可进行操作

d   剪切/删除

y   复制



Ctrl+v   如果当前是V(大写)模式，就变成v(小写)

         如果当前是v(小写)模式，就变成普通模式。

         如果当前是普通模式，就进入v(小写)模式



利用这个，可以进行多行缩进。



ggVG   选择全文



# 打开两个文件分属两个窗口

vim -o 1.txt 2.txt





# 假设现在已经打开了1.txt



:sp 2.txt   开启一个横向的窗口，编辑2.txt

:vsp 2.txt  开启一个竖向的窗口，编辑2.txt



:split        将当前窗口再复制一个窗口出来，内容同步，游标可以不同

:split 2.txt  在新窗口打开2.txt的横向窗口



# 需要注意：内容同步，但是游标位置是独立的



Ctrl-w s    将当前窗口分成水平窗口

Ctrl-w v    将当前窗口分成竖直窗口



Ctrl-w q    等同:q 结束分割出来的视窗。

Ctrl-w q!   等同:q! 结束分割出来的视窗。

Ctrl-w o    打开一个视窗并且隐藏之前的所有视窗

窗口切换

# 特别说明：Ctrl w <字母> 不需要同时按



Ctrl-w h    切换到左边窗口

Ctrl-w l    切换到右边窗口



Ctrl-w j    切换到下边窗口

Ctrl-w k    切换到上边窗口





# 特别说明：全屏模式下

:n    切换下一个窗口

:N    切换上一个窗口

:bp   切换上一个窗口



# 特别说明：非全屏模式



:bn    切换下一个窗口，就当前位置的窗口的内容变了，其他窗口不变

:bN    切换上一个窗口，就当前位置的窗口的内容变了，其他窗口不变

窗口移动

# 特别说明：Ctrl w <字母> 不需要同时按



Ctrl-w J   将当前视窗移至最下面

Ctrl-w K   将当前视窗移最上面



Ctrl-w H   将当前视窗移至最左边

Ctrl-w L   将当前视窗移至最右边



Ctrl-ww    按顺序切换窗口

调整尺寸

# 友情提示：键盘切记不要处于中文状态



Ctrl-w +   增加窗口高度

Ctrl-w -   减少窗口高度

退出窗口

:close    关闭当前窗口

:close!   强制关闭当前窗口



:q       退出，不保存

:q!      强制退出，不保存



:x       保存退出

:wq      保存退出

:wq!     强制保存退出



:w <[路径/]文件名>        另存为

:savesa <[路径/]文件名>   另存为



ZZ 保存并退出。



:only    关闭所有窗口，只保留当前窗口(前提：其他窗口内容有改变的话都要先保存)

:only!   关闭所有窗口，只保留当前窗口



:qall 放弃所有操作并退出

:wall 保存所有，

:wqall 保存所有并退出。



文档加密

vim -x file_name



然后输入密码：

确认密码：



如果不修改内容也要保存。:wq，不然密码设定不会生效。


按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。



19. 执行命令

# 重复前一次命令

.  



# 执行shell命令

:!command



# 比如列出当前目录下文件

:!ls  



# 执行脚本

:!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。

:!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。



:suspend或Ctrl - Z 挂起vim，回到shell，按fg可以返回vim。







