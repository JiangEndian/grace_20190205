数据库是通过手动创建的，脚本名为schema.sql:
    >>先删除已存的此库
    >>创建库
    >>授权数据库对象的用户和密码
    >>创建表的语句们

app.py：
>>从asyncio获取EventLoop(把协程扔进去执行，就能实现异步)引用loop
>>用得到的loop执行init(loop)
    >>init(loop)首先通过orm.create_pool(loop, **configs.db)创建数据库连接池
        orm.py的create_pool(loop, **kw):
        >>定义一个全局变量global __pool来存放全局连接池
        >>__pool = aiomysql.create_pool(loop, **kw)生出了这个连接池
            >>host/port/user/password/db/.../loop等等数据库相关参数
            >>configs.db得到覆盖某些基本配置的configs再得到其db{数据库信息的Dict}
    >>通过web.Application(loop, middlewares)得到响应HTTP请求的app
        >>有4个middlewares(中间软件)拦截器，它先处理下请求再分发出去
        >>logger_factory是用来统一记录URL的request的方法和路径的
        >>auth_factory是用来检测cookie并提取user信息附到request上的
            并且检测路径为管理时，判断user后直接返回登陆页或予以通过
        >>response_factory是先r = handler(request)分发出去得到结果r
            再对r进行处理，转为web.Response对象返回去(拦截器可以双向)
        >>data_factory没有用到，是用来检测POST请求并处理其提交数据的
            处理方法为按照POST的内容类型相应处理后附加到request上
    >>用init_jinja2(app, **kw)初始化jinja2模板引擎
        >>根据kw设定一些选项，如是否自动重新载入之类，并提供默认值
        >>再得到路径设定，如果没有就设为当前路径下的templates
        >>再根据设定的选项和路径载入，得到Environment对象的env引用
        >>再找filters们，如果不为空，就把filters也附到env里面
        >>最后再把env附为app的__templating__属性
    >>通过add_routes(app, 'handlers')把handlers.py的URL处理函数注册(干活的在这里)
    coroweb.py的add_routes(app, module_name):注册handlers的所有带method和path的函数
        >>得到mod对象<module 'handlers' from '/home/ed/grace/git/someapp/webapp/www/handlers.py'>
        >>for attr in dir(mod):遍历mod对象的所有属性(名)
        >>if attr.startswith('_')排除掉以_开头的属性
        >>fn = getattr(mod, attr)按属性名来找到属性值(函数对象)
        >>if callable(fn)判断如果是方法的话(自己定义的方法们)
        >>通过fn的'__method__'和'__route__'来得到method和path
            >>通过@coroweb.py的get(path)/post(path)装饰器给附加的
                >>get把原来的方法嵌入到wrapper(*args, **kw)中
                >>wrapper附加__method__和__route__属性值为'GET'和path
                >>返回这个有了附加属性的方法(已装饰好了的原函数)
                >>因为装饰器也要接受自己的参数path
                >>就得编写一个返回装饰器的函数decorator
                >>最后，返回这个函数。共三层嵌套
                >>post(path)同样，只不过把__method__的值换为'POST'了
        >>判断如果二者都存在，那么add_route(app, fn)注册此方法对象
            就是把request的方法method(get/post),路径(URL),处理函数对象fn给注册了
            >>coroweb.py的add_route(app, fn):
                >>按照惯例取出方法和路径(又重复判断了下二者都存在)
                >>如果不是协程方法@/async并且不是迭代器，就协程一下
                >>然后，用app.router.add_route(method, path, 处理方法
                >>RequestHandler(app, fn))给注册到app对象上去
                    coroweb.py的RequestHandler(object):
                    >>把app附加到self._app上，再把fn的相关信息提取并附加到self上
                        >>_func=fn这是把这个处理函数先附加上
                        >>_has_request_arg=has_request_arg(fn)判断有无要求request参数
                            >>先得到函数的(参数们)这样的tuple的引用sig
                            >>再分析sig得到参数的排序字典引用params.'参数名':默认值?
                            >>把found置为False再遍历params如果得到'request'则True
                        >>_has_var_kw_arg=has_var_kw_arg(fn)判断有无VAR_KEYWORD
                            >>同上遍历参数的排序字典如果有参数的类型为VAR_KEYWORD为True
                        >>还有其他的关于fn的信息...
                    >>定义__call__(self, request):不就是当方法用嘛
                        >>嗯，就是得当方法用嘛，add_route要求的就是要方法
                        >>根据fn的信息和request的信息进行一系列处理得到kw
                        >>再try异步运行_func(**kw)得到结果r(用干活的开始干活)
                        >>返回r或者运行出错的话返回dict(错误相关信息)
    >>通过add_static(app)添加静态文件
        coroweb.py的add_static(app)
        >>得到当前路径下的static文件夹，通过app.router.add_static()把路径添加进去
    >>通过asyncio的EventLoop的create_server(app.make_handler(), 'host', port)创建服务
    >>return 异步执行的上一步得到的返回结果srv。完成
>>loop执行的方式是run_forever()

好了，整个系统形成了，现在，可以处理get/post的各种URL请求了
处理方法要用web框架的批量注册方法注册的话得写在handlers.py里并附上method和path
然后它处理的时候，就各种操作数据库并各种返回了，当然，它处理前后要经过中间软件过滤器

因为我没学前端，所以，别想创建新的了，太不自量力了，太纯浪费时间了。。。就改下原有的吧。。。

分析handles.py(由它来对GET/POST的URL的request进行各种处理后返回出去)
    >>定义了cookie的相关信息，包括名和secret字串
    >>定义了检测request里面的用户(如果中间软件/拦截器给成功加上了)并判断是否为管理员的方法
        >>不是的话，抛出APIPermissionErro()
    >>定义了page_str转换为int的方法get_page_index，如果小于1(不足一页)则赋值1,然后返回p
    >>定义了user2cookie和coolie2user方法来进行cookie和user之间的转换生成
>>开始正文——处理方法们的生活～首先，已经注册了自己要处理的method和路径，然后，躺着等叫

>>@get('/')处理GET:'/'的方法index(*, page='1')生成第一页blog页面
    >>得到page_index = get_page_index(page)(第一页)
    >>然后yield from Blog.findNumber('count(id)')执行得到num总的blog表条数
        >>Blog类等Model的子类，只负责定义数据库表和作为接收参数们的容器，方法是Model的
        >>Model的元类是ModelMetaclass(下面的参数cls代表的是对象的类对象)
        orm.py的Model的findNumber(cls, selectField, where=None, args=None):
            >>根据selectField和cls里面的__table__信息加上如果存在的条件拼接成sql语句
            >>select(' '.join(sql), args, 1)用select方法执行得到rs并返回rs[0]['_num_']
            >>上面的返回结果是一个行数，共有几行的意思，其拼的sql语句就是执行这个功能
            orm.py的select(sql, args, size=None):
                >>首先从__pool中得到conn，然后，从conn中得到cur
                >>cur.execute(sql.replace('?', '%s'), args or ())来替换成mysql的占位符
                >>if size:判断有无要求大小，有的话，cur.fetchmany(size)，否则all...
                    >>8行的user表共得到一行结果，为'_num_'=8这样的
                >>关闭cur然后返回上面得到的结果rs
    >>再用Page(num)处理下得到page对象(包含条数/页数等等相关信息)
        apis.py的Page对象init by (item_count, page_index=1, page_size=10)
            >>根据item_count总条数,page_index从哪页开始,page_size每页size条数
            >>计算得到page_count总页数,offset起始条目(如第8页为70-80),limit=page_size
            >>再通过要求的页和总页数得到有无下页，并通过page_index>1判断有无前页
            >>通过__str__(self)生成带有上面前两行的6条信息的字串并__reper__ = __str__
    >>通过Blog.findAll(orderBy='created_at desc', limit=(page.offset, page.limit))
    >>得到了要的具体条目们(可按顺序取是因为有排序)blogs
    orm.py的findAll(cls, where=None, args=None, **kw)用来按条件查询(如果有的话)
        >>select语句已经在元类中通过用户定义的Model子类信息生成好了，附上条件就行
        >>其他的语句也已经生成好了，只是差了参数们而已，当然，都是?占位(%sPy得用)
        >>通过执行select(' '.join(sql), args)来得到返回值rs
        orm.py的select(sql, args, size=None):
            >>首先从__pool中得到conn，然后，从conn中得到cur
            >>cur.execute(sql.replace('?', '%s'), args or ())来替换成mysql的占位符
            >>if size:判断有无要求大小，有的话，cur.fetchmany(size)，否则all...
            >>关闭cur然后返回上面得到的结果rs
    >>再返回{'__template__':'blogs.html', 'page':page, 'blogs':blogs}这样的数据
    blogs.html是怎样处理的呢？(这是前端了，应该属于GUI吧，还是有JS的。)
        >>{% extends '__base__.html' %}来继承父模板
        __bash__.html是怎样的呢:
            >>HTML的老规距代码行+定义了charset="utf-8"
            >>block meta
            >>block title(块后面给附加上了-Awesome Python Webapp...)
            >>引入了css和js的相关资源文件
            >>block beforehead用来写自己的JS代码+</head>关闭head...
            >>一串HTML代码，还有推销作者自己网站的链接
            >>判断{% if __user__ %}显示{{__user__.name}}并加上登出的链接图标
            >>{% else %}就给出登陆和注册的链接图标{% endif %}
                ({% x %}{% endx %}是jinja2模板引擎的语法)
            >>封闭标签们+block content
            >>作者的相关链接
            >>底部的Powered by和其他链接...
        >>{% block title %}日志{% endblock %}标题设为日志(这块block 名中写的东西，继承的文件可以重写)
        >>{% block content %}中写blog相关的HTML信息
        >>并{% for blog in blogs %}遍历用{{blog.id}}来引用相关参数
        >>并生成类似<a href="/blog/{{blog.id}}">{{blog.name}}</a>这样的链接来
        >>{% end for %}+{{pagination('/?page=', page)}}生成page操作链接们
        >>加上链接到作者的友情链接们。。。
        >>{% endblock %}了...

>>@get('/blog/{id}')处理GET:'/blog/{id}'的方法get_blog(id)
    >>id是在调用它的app函数分析传给它的值 
    >>(web.Application注册的URL:/blog/{id}和请求的URL:/blog/aslfkjsalk对比判断给它或者给后面定义的同样的URL:/blog/{cd}...，生成kw{'id'('cd'):001514861142476bd95fab85f7542178dba245d02470c57000'}.app执行fn()时，传request的同时传的吧
    >>Blog.find(id)内部首先得到[{}]这样的类似数据，再Blog(**rs[0])即得到Blog类的blog对象
    orm的Blog.find()即orm的Model.find(cls, pk):
        >>调用select(默认的select语句 where 主键=?, [pk], 1)
        orm.py的select(sql, args, size=None):
            >>首先从__pool中得到conn，然后，从conn中得到cur
            >>cur.execute(sql.replace('?', '%s'), args or ())来替换成mysql的占位符
            >>if size:判断有无要求大小，有的话，cur.fetchmany(size)，否则all...
            >>关闭cur然后返回上面得到的结果rs
    >>再根据id通过Comment.findAll('blog_id=?', [id], orderBy='created_at desc')得到所有评论
    orm.py的Model的findAll(cls, where=None, args=None, **kw)用来按条件查询(如果有的话)
        >>select语句已经在元类中通过用户定义的Model类信息生成好了，附上条件就行
        >>其他的语句也已经生成好了，只是差了参数们而已，当然，都是?占位(%sPy得用)
        >>通过执行select(' '.join(sql), args)来得到返回值rs
        orm.py的select(sql, args, size=None):
            >>首先从__pool中得到conn，然后，从conn中得到cur
            >>cur.execute(sql.replace('?', '%s'), args or ())来替换成mysql的占位符
            >>if size:判断有无要求大小，有的话，cur.fetchmany(size)，否则all...
            >>关闭cur然后返回上面得到的结果rs(再有同样的就不附加细节了)
    >>遍历每条评论的dict(aiomysql返回的结果可以直接dict.attr)，并用text2html把content属性值转换为html_content属性
    >>用markdown2.markdown(blog.content)把blog的内容转换成blog.html_content
    >>return {
        '__template__': 'blog.html', #告诉用这个模板处理
        'blog': blog, #传blog变量
        'comments': comments #传comments变量
        (添加评论不好使，我给加上了__user__属性为user，blog.html需要__user__才能显示发表评论框
        get_blog(id, request)添加了request，从其中request.__user__就可以获取了，附加上，嗯，能添加评论了呢。。。)
    }给app来进行middlerware处理，或者其他的模板处理之类的东西。。。
    blog.html继承了__bash__.html，显示出来用户名(当前如果登陆的有的话)就可以发表评论了(有个发表评论的form)
        >>显示评论和相关信息，遍历comments。因为已经倒序了，所以显示最新的
        >>再显示作者头像和作者名字，显示友情链接，endblocd(content的)

>>@get('/api/show/users') #显示所有用户，不应该有的api...
    >>直接User.findAll，遍历替换密码为******，返回这个dict(users=users)(然后middleware会处理为JSON并返回之)

>>@get('/register')处理localhost/register路径的方法，返回注册页面即是
    >>直接返回注册页面{'__template':'register.html'}这个模板是初始化好的，所以，直接用名就行，添加新的，得重启之
    register.html页面-注册页面
        >>继承bash并{% block title %}注册{% endblock %}
        >>添加提交验证的js在block beforehead中(里面也用了Vue的MVC框架MVVM模型-显示-显示-模型连接件)
        >>在block content中加入form(id为vm的from)收集信息，并用<input v-model='name'来同步存储的model-name和view-input
        >>endblock完成

>>@get('/signin')处理localhost/signin的函数，返回signin.html模板
    >>signin.html模板用来登陆，用了Vue框架同步显示和模型，UK素材类，用JS代码提交给/api/authenticate，成功的话JS重定为/
>>@post('/api/authenticate')上面的家伙返回的页面里的JS提交的路径(API)
    >>判断关键字变量email和passwd是否存在
    >>获得所有对应email的条目，没有则报错交给app处理吧。错误类型有规范
    >>没错则用第一个作为user(理应只有一个)，用其id和:和输入的passwd进行shar来和user.passwd对比(email只用来找)
    >>没有错误则生成一个web.Response()对象r，r.set_cookie(COOKIE_NAME, user2cookie(user, 86400), max_age=86400, httponly=True)生成cookie把user.passwd设为****(这个user会返回去吗？可能有别的hack手段吧，我太无知了。。。)，设定一些参数返回r

>>@get('/signout')注销/登出
    >>从request中得到Referer再得到r,r.set_cookie(COOKIE_NAME, '-deleted-', ...)删除cookie后再返回r即可

>>@get('/manage/')重定向至管理所有评论
    >>return 'redirect:/manage/comments'
>>@get('/manage/comments')上面的重定向的地方就是这里.manage_comments(*, page='1'):
    >>返回{'__template__':'manage_comments.html', 'page_index":get_page_index(page)
    manage_comments.html是管理评论页面模板
        >>继承base，标题评论，JS的function initVM(data){}
        >>其中，删除事件对应函数提示并确认后把评论id提交/api/comments/id/delete，成功则refresh()
        >>又定义了一个载入好了即触发的无名函数用来从/api/comments', {page: {{ page_index }}获取数据
        >>结果处理的无名方法为正确则隐藏#loading，并initVM(results)(AJAX处理数据的)
        两个api请看下面
        >>开始显示一些文本提示和相关链接
        >>显示正在加载，用个<div id="vm"来MVVM。
        >>里面有不变的文本提示，和一个<tr v-repeat="comment:comments">遍历comments得到comment
        >>再<span v-text="comment.user_name"这样排列评论信息，最后加个<a href="#0" v-on="click:delete_comment(comment)
        >><div 用page来翻页的东西>。完
    >>@get('/api/comments')是用来按页获取所有评论的api
        >>api_comments(*, page='1')根据page得到page_index，再Comment.findNumber('count(id)')得到到所有评论数目num
        >>Page(num, page_index)得到Page对象p，并按创建时间倒序加上p里的条件得到所有评论，然后返回dict(page=p, comments=comments)
    >>@post('/api/comments/{id}/delete')首先检测admin然后就按id find得到Blog对象c(find是返回此类对象的)
        >>c存在就执行yield from c.remove()并返回dict(id=id)

>>@get('/manage/blogs')按page(get不给就默认为1)(是在此路径后附加?page=2来这样传递page变量的，忽然懂了。。。
    >>按此返回manage_blogs.html模板和page_index信息get_page_index(page)
    manage_blogs.html是管理日志的页面模板
        >>一个加载完成时运行的方法从/api/blogs, page: {{ page_index }}来获得来隐藏loading和执行initVM
        >>显示提示和新日志的链接，然后v-repeat="blog:blogs"来遍历生成显示和相应的链接，再加上edit/delete，分页，完成。

>>@get('/manage/blogs/create')返回创建日志页面和action的api路径，不接受id参数，提交的action为/api/blogs要检查用户
    >>manage_blog_edit.html.先把{{ id }}和{{ action }}var成ID和action便于操作，如果有id就通过/api/blogs/{id}获得blog并用此initVM(blog)
    >>没有的话就用空initVM。再加上一些相关按钮和链接，完成。

>>@get('/manage/blogs/edit')同上，不过不返回空的id和没有参数的action，而是附上id信息。
    >>它也接受get的id参数，所以，是页面点击完成的，或者，直接手动附加也行

下面是api们了，api们一般是通过网页点击或通过JS代码要求的get/post
>>按页获取评论的get
>>附加id的提交评论的post，这个id是Blog的
>>附加id的删除评论，需要检测admin，这个是自己的了
>>获取所有用户的，密码替换成***没有哪里用到它吧。。。
>>注册用户用的
>>获取分页日志的
>>按id获取blog的
>>创始日志的
>>更新日志的
>>删除日志的

那么，最好的学习方法是自己试着做一个，先把这个图化了，然后，开始吧倒水吧，水到渠成～
