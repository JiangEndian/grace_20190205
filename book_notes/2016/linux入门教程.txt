命令————————————————————————————————————————————————————————
newADD
linux系统日常管理————
w	查看当前系统的负载
cat /proc/cpuinfo查看cpu信息grep -c 'processor' /proc/cpuinfo查看几个
vmstat监控系统状态（具体显示系统信息）
vmstat 1 5表每1S打印一次，5次，vmstat 1，每秒1次，Ctrl+c强制结束。
top	显示进程所占系统资源-bn1非动态打印资源使用情况，可用在脚本中。
sar	监控所有系统状态。还可以打印历史信息。初次使用会出错，因为没有生成相应数据库文件在/var/log/sa/下，默认保存9天。
free	查看内存使用情况-m-g以M/G为单位打印
ps		aux查看系统进程（-efl类似）|grep -c mingetty查看某进程或者它的数量
netstat	查看网络状况-lnp打印当前系统启动哪些端口，-an打印网络连接状况（WEB服务80端口，可以-an|grep 80查看当前连接web服务的有哪些IP）
tcpdump	抓包工具-nn 让3,4,列显示成IP+端口号的形式，不加是主机名+服务名称  -i 设备名称
ifconfig查看网卡IP，后跟设备名，只打印指定设备的IP信息 etho...
ifdown eth0;ifup eth0,停掉网卡，启示网上。（远程的话，很有可能后面会因为断网。。。所以尽量使用service network restart来重启网卡。
mii-tool	查看网卡是否连接。
hostname	查看主机名，后跟，直接改主机名。endian,下次登陆就会换。保存在内存中。相关配置在/etc/sysconfig/network中HOSTNAME行。
/etc/resolv.conf把dns地址写入这个就可以设置dns了。
/etc/hosts也能解释域名，需要手动，作用是临时解析某个。。。一IP，多域名
iptables -t nat表名 -n不针对IP反解析v详细L列出，查看规则以及清除规则
	不加t则打印filter表相关信息。
iptables -F清除所有规则，-Z把包及流量计数置零（有用）。
iptables -A INPUT -s 10.0.2.35 -p tcp --sport 1234 -d 10.0.2.68 --dport 80 -j DROP，增加一条规则。省略-t针对filter表。-A 表示增加一条规则,另外还有-I 表示插入一条规则,-D删除一条规则;后面的INPUT即链名称,还可以是OUTPUT或者FORWORD;-s 后跟源地址;-p 协议(tcp, udp, icmp); --sport/--dport(跟-p一起使用) 后跟源端口/目标端口;-d 后跟目的IP(主要针对内网或者外网);-j 后跟动作(DROP即把包丢掉,REJECT即包拒绝;ACCEPT即允许包)-i指定网卡，不常用
iptables -I INPUT -s 10.0.2.36 -j DROP丢掉来自那个的数据包
iptables -D INPUT -s 10.0.2.36 -j DROP删除刚刚插入的规则（只有LD不同）
iptables -A INPUT -s ... -p tcp --dport 80 -j DROP把...且tcp到80的丢掉
iptables -I OUTPUT -p tcp --dport 22 -d ... -j DROP把发送到...的22口的
iptables -A INPUT -s .../24 -i eth0 -j ACCEPT把这个网段且作用在eth0的放行
iptables -nvL --line-numbers查看结果（里面有个第一列num）
iptables -D OUTPUT 1删除这个规则
iptables -P后面跟链名 INPUT DROP（远程，回车断）预设策略，所有DROP
iptables -I INPUT -p icmp --icmp-type 8 -j DROP，8指在只能ping通别人。
只针对filter表,预设策略INPUT链DROP,其他两个链ACCEPT,然后针对10.0.2.0/24开通22端口,对所有网段开放80端口,对所有网段开放21端口。
#!/bin/bash
ipt="/sbin/iptables"
$ipt -F
$ipt -P INPUT DROP
$ipt -P OUTPUT ACCEPT
$ipt -P FORWARD ACCEPT
$ipt -A INPUT -s 10.0.2.0/24 -p tcp --dport 22 -j ACCEPT
$ipt -A INPUT -p tcp --dport 80 -j ACCEPT
开机启动，加入到/etc/rc.d/rc.local中sh /usr/local/sbin/上面那个sh文件
crontab	关于cron任务计划的操作，-u指定某用户（不加为当前），-e制定计划任务，-l列出，-r删除
crontab -e，01 10 26 05 4 echo "OK">/root/cron.log，
上面的例子表示在05月26日(这天必须是周四)的10点01分执行’ echo "ok" >/root/cron.log’这样的任务。Cron的格式是这样的,每一行代表一个任务计划,总共分成两部分,前面部分为时间,后面部分要执行的命令。后面的命令不用多讲,至于前面的时间是有讲究的,这个时间共分为5段,用空格隔开(可以是多个空格),第一段表示分钟(0-59),第二段表示小时(0-23),第三段表示日(1-31),第四段表示月(1-12),第五段表示周(0-7,0或者7都可以表示为周日)。从左至右依次是:分,时,日,月,周(一定要牢记)!
ntsysv配置哪些服务开启，有点像图形界面，但是用键盘控制的。
Linux系统所有的预设服务可以查看/etc/init.d/目录得到
chkconfig --list列出所有任务，详细到级别|grep crond 查看某个
chkconfig --level 3/345 crond off/on在某个级别开/关服务，省略为2345
--del crond删除  --add crond加入系统服务，可以service xx start这样开，常用于把自定义的启动脚本加入到系统服务当中。

shell脚本————————
#！/bin/bash
执行：sh -x查看执行过程 filename即可，或者chmod +x test.sh  ./test.sh（vim编辑的文档默认没有X权限，加一个就行了。）
data -d "-/+n day/month/year"表打印n天/月/年 前/后 "+%Y%m%d %H:%M:%S",%Y表年，%y两位年%m表月，%d表日，%H表时，%M表分，%S表秒，%w表星期。
例子：d=`date +%H:%M:%S` echo "this date is $d"变量，引用
date +%Y/%m/%d/周%w
2016/12/07/周3
数学计算要用[]括起来并且外头要带一个$。例：a=1,b=2,sum=$[$a+$b],echo "sum is $sum"（mint，sh不好使，bash才好使）
交互echo "input",read x,read y,sum=$[$x+$y],echo $sum...
read从标准输入获得变量的值，后跟变量名，read x表x的值需要用户通过键盘输入得到
read -p "showmessage:" x/y 提示，并读入到x，y中，更简洁
shell脚本的预设变量。shell脚本执行时可以跟变量，可以多个～sum=$[$1+$2]这个$1$2就是shell脚本的预设变量，一个shell脚本的预设变量是没有限制的。另外还有一个$0，不过它代表的是脚本本身的名字。（好像就是脚本文件名。。。）
判断：
if 判断语句;then		read -p "Input" a,if ((a<60));then
commad						echo "TTTT"
fi								fi(shell特有：用一个小括号或不用都会报错）
if 判断语句;then		read -p "Input" a,if ((a<60));then
command					echo "TTTT"
else							else
command					echo "FFFF"
fi								fi
if 一;then cmd elif 二;then cmd else cmd fi.
判断数值大小还可以用[]，但不能用<>=这样的了
要用-lt<,-gt>,-le<=,-ge>=,-eq=,-ne!=,
if[$a/12345  -lt/other  $b/12345]
逻辑运算符><,&&与||或
数字运算+-*/%取模
if [-e判断存在-d判断目录-f判断普通且存在-r判断读权限-w-x filename];then
case 变量 in
value1)
command
;;
value2)
commad
;;
*)
command
;;不限制value个数，*代表除了上面的value外的其他值。
for i in `seq 1 5`;do（seq 1 5表从1到5的一个序列=in 1 2 3 4 5）
	echo $i
done（for 变量名 in 循环的条件;do command done）
a=10
while [ $a -ge 1 ];do（中括号两边的空格不可少）
        echo "$a"
        a=$[$a-1]
done（while 条件;do command done）另外，循环条件可忽略：
函数：
function sum(){
	sum=$[$1+$2]
	echo $sum
}（function 函数名(){command}）
sum $1 $2 （注意，在shell脚本中，函数一定要写在最前面。）
————————————
正则表达式——————想了下，多用VIM吧。。。
grep -c打印符合要求的行数-i忽略大小写-n加行号-v打印不符合要求的行-An后跟数字，打印符合要求的行及后面n行-Bn打印符合要求的行及前面n行-C要求的及上下n行 'word' filename（空格加不加都行An=A n）grep []/grep 'char'/grep 'char[]char'...'[^r]oo'即3个字母*oo，*是除r以外的其他字符。
[15]1or5,[0-9]num,[a-zA-Z]char,[0-9a-zA-Z]num&char,[^char]exceptThisChar's char,'^str'/'str$'过滤出以此开头/结尾的行,^表行开始，$表行结尾，^$表空行。筛选非空行grep -v '^$' filename,'^[^a-zA-Z]'非英文字母开头的，.表示任一字符，r..o表r与o之间有任意两个字符的过滤，*表示任意多个前面的字符，'ooo*'表示两个o后面跟任意多个o。。。'.*'表任意字符任意多个，空行也包含在内。o{n},表n个前面的字符{}需要转意'o\{n\}',也可表示一个范围，\{n1\n2\}表示n1到n2次，n2为空表大于等于n1次。
egrep,sed,awk，越来越强大了，驾驭不了了，不能被反驾驭，放弃
——————————
grep	:过滤一个或多个字符,将会在后续内容中详细介绍其用法
cut -d"分隔字符" c第几个字符 f第几个区块 [-cf] n数字：截取某一个字段（d×f1截取第一段，cfn/cfn-n/cfn,n,n）
sort	-t分隔符-n用纯数字排序-r反向排序-u去重复-k1n,2n由1区间排序到2区间-k1n对1字段排序：排序用
wc -l统计行数-m统计字符-w统计词数 文档名
uniq 去重复的行，作者常用的选项只有一个-c，统计重复的行数，并把行数写在前面。需要先用sort排序然后才能
tee 后跟文件名，类似于重定向>，但多了个功能，同时显示在屏幕上。
tr -d删除此字符，-s去掉重复的字符：替换字符，常用来处理文档的特殊符号，如DOS文档中的^M符号。大<>小
split -b以byte来-l依行数来：切割文档 结果文档主名
; 在一行运行两个或以上命令，～用户的家目录，&后台执行，
jobs 查看shell中后台执行的任务，fg可以调到前台，sleep为休眠，后面跟秒数，常用于循环的shell脚本中。Ctrl+z使之暂停，再输入bg可以再次进入后台执行。多任务情况，fg后跟任务号，由jobs命令得到。
[ ] :中括号,中间为字符组合,代表中间字符中的任意一个[12a][a-c][0-9]......
在上面刚刚提到了分号,用于多条命令间的分隔符。另外还有两个可以用于多条命令中间的特殊符号,那就是“&&”和”||”。下面笔者把这几种情况全列出:cmd1;cmd2不管1成功与否，2都执行,cmd1&&cmd2只有1成功，2才会执行,cmd1||cmd2，1成功后2不执行（可理解成或者，只有一个执行成功）
————————————SHELL
!!执行上一条指令。!n命令历史中的第n条。!字符串（大于等于1）如：!ta表执行最近一次以ta为开头的指令。
tab指令/路径/文件名补全，连按再次，会把所有的指令和文件名都列出来。
别名：alias，解除，unalias。直接alias会看到目前系统预设的alias。alias 别名='具体的命令'
通配符：*匹配0+个字符，?匹配一个字符
输入重定向改变命令的输入<,输出重定向改变命令的输出>（常用：将命令结果输入到文件）。错误2>,追加>>
管道符|，把前面命令的运行结果丢给后面的命令。
Ctrl+z，暂停，fg恢复，bg后台，Ctrl+c终止
通常shell预设的变量(替代特殊意义的设定和数据)都是大写的。PATH：所有命令的绝对路径的设定。echo $变量
PWD当前路径，HOME家，LOGNAME登陆名，env列出系统预设的环境变量。常用：HISTSIZE历史记录数，HOSTNAME主机名，SHELL类型，LANG语言相关，MAIL邮件目录。set列出系统预设全部变量。
用户可以自定义变量：key=string...但只在当前shell中生效。
系统所有用户登录都能使用改变量，在/etc/profile文件末行加入：export key=string,然后运行source /etc/profile
只让当前用户使用该变量：在家目录.bashrc末行加入export key=str，然后运行source .bashrc生效（刷新配置）
变量名：英，数字，下划线，且不能以数字开关。
变量内容带有特殊字符时，需要加上单引号。变量内容自带，就双。用到命令，反引:me=`pwd`。引其他变量加双引
单引号里面的特殊字符全部失去意义，双引号不会取消掉特殊字符本身作用，如$。。。反引号是引用命令。。。
pstree	把linux系统中所有进程通过树形结构打印出来。父shell中设定一个变量后，进入子shell后该变量不会生效
export 声明一下这个变量，让该shell的子shell也知道变量abc的值是123,如果不加任何变量名，会声明所有变量。
unset	变量名，取消某个变量。
————————————
./config --help 可以查看源码安装可用的选项 --prefix=PREFIX<定义安装到哪里(约定：源码包安装/usr/local/***)
完成后，会生成Makefile文件,还可以通过命令 echo $ 来判定，如果是0,表示上一步操作成功完成，否则，不成功
make	这一步操作，把源代码编译成二进制的可执行文件，时间漫长，长短取决于代码量和机器配置。echo $
make install	安装，创建相应目录及文件。安装完成后，在/usr/local目录下就有了这个软件的安装目录了。
————————————
文档的压缩和打包-linux系统中后缀名无所谓，但对于压缩文件必须带上。判断哪种压缩工具所压缩，正确解压
gzip -d解压 -#压缩等级(6)1-9最好 filename（不可压缩目录）
bzip -d解压 -z压缩(可省略) filename
tar   -z同时用gzip压缩 -j同时用bzip2压缩 -x解 -t查看里面 -c建立一个tar包或者压缩包 -v可视化 -f后面跟文件名(压缩时表压缩为这个，解压时解压这个) -p使用原文件的属性(压缩档和win一样后缀判断类型) -P可以使用绝对路径 --exclude filename打包或者压缩时，不要将filename文件包括在内 filename（n个就跟n个这）
————————————
vim：
一般模式下移动光标:
[h←] [j↓] [k↑] [l→] [Ctrl+f,pageUP] [Ctrl+b,pageDown] [Ctrl+d/u屏幕前/后移半页] [+/-光标移动到非空格符的下/上一列] [n空格，按下数字n然后空格，光标右移n个字符，如果小于n，光标继续从下行右移一直到n] [0/(Shift+6)，移动到本行行首，Shift+4到行尾] [H/M/L光标移动到当前屏幕顶/中央/底行] [G/nG/gg，光标移动到文本的最末行/第n行/首行] [n回车光标下移n行]
一般模式下查找与替换：
[/word后找word，n后一个] [?word前找，n前一个] [:n1,n2s/word1/word2/g，在n1和n2行间找1并替换为2,/可换成#] [:1,$s/word1/word2/g，从第1行到末行，找1并替换成2] [:1,$s/word1/word2/gc，c，替换前需要确认]
一般模式下删除复制粘贴：
[x,X，x为后删除一个字符，X为前删] [nx，后删n个字符] [dd/ndd，删除光标所在的那一行/向下n行] [d1G/dG，删除光标所在行到第一行/末行的所有数据] [yy/nyy，复制光标所在的那行/向下n行] [p,P，p复制的数据从光标下一行粘贴，P则从光标上一行粘贴] [y1G/yG，复制光标所在行到第一行/末行的数据] [J，将光标所在行与下一行的数据结合成同一行] [u，还原过去的操作]
进入编辑模式：
[i前，I首，a后，A末，o下插行，O上～，r替换字符1次，R替换到ESC]
命令模式：
[:w/:w!保存与强制保存（只读时）] [:q/:q!退出与强制退出（不保存退出）] [:wq保存，退出] [:e!还原成最原始状态] [ZZ若文档没有改动，不保存离开，改动，则保存后离开，等同:wq] [:w [filenae] 编辑后的文档另存为] [:r [filename]在当前光标所在行的下面，读入filename文档的内容] [:set nu/nonu显示/取消行号] [n1,n2 w [filename]将n1到n2的内容另存为] [:! command暂时离开vim运行某个linux命令，例如:! ls /home...会提示按回车回到vim]
————————————
磁盘配额：
quota				（显示组/用户的限额）
		-g组 -u用户 -v显示 -s选择inod或硬盘空间来显示
quotacheck		用来扫描某一个磁盘的quota空间
		-a所有 -u扫描用户 -g扫描组 -v显过程 -m强制进行扫描
		aquota.group&aquota.user磁盘配额配置文件，没有磁盘配额无效。首次执行会提示没有这两个文件。因为以前没配置过，执行后，生成
edquota			用来编辑某个用户或者组的quota值	-gv查看组配额
		-u用户	-g组	-t编辑宽限时间		-p拷贝某用户/组的quta到另一个中
		当运行edquota -u user时，系统会打开一个文件，有7列，代表：
Filesystem磁盘分区，如/dev/hda3	
blocks当前用户在当前的Filesystem中所占用的磁盘容量，Kb，不要改。
soft/hard当前用户在该Filesystem中的quota值，soft指最低限额，可超过，但必须在宽限时间内降低到这个值以下。hard指的是最高限额，即不能超过这个值。当用户的磁盘使用量高于soft值时，系统会警告用户，提示要在宽限时间内把使用空间降低到soft值以下。
inodes:目前使用掉的inode的状态，不用修改
quotaon 启动quta，在编辑好quota后，需要启动才能使生效。-av查看
	-a全部设定的quota启动 -u用户的 -g组的 -s显示相关信息
quotaoff 关闭quota（常用只一：quotaoff -a 关闭全部quota）
步骤：
1、确认/home是否单独挂载在一个分区。df。quota针对分区来限额的。
2、fdisk -l 查看可用，把单独的分区挂载在/home下
3、打开磁盘的quota功能（linux默认没有对任何分区做quota支持）
		修改/etc/fstab文件的第四列/dev/hdb1 /home ext3 defaults,userquota,grpquota 0 0(已经有/home行，修改第4列即可)
4、重新挂载/home：umount /home->df -h->mount -a->df -h
		mount -o remount -a（全部挂载）
查看是否启用quota-> cat /etc/mtab（/home那行是否有usrquo...）
开机启动:启动磁盘配额的命令是quotaon -aug，加入到/etc/rc.d/rc.local...
————————————
free -m以M查看
————————————
建立swapfile->格式化为swap格式->启用这个虚拟磁盘
dd if=/dev/zero of=/tmp/newdisk bs=4k count=102400（利用dd来创建一个419M的文件/tmp/newdisk出来。)
（if代表从哪个文件读，/dev/zero是linux下特有的一个0生成器。）
（of代表输出到哪个文件，bs即块大小，count则定义有多少个块。）
mkswap /tmp/newdisk 这个命令是“专门”格式化swap格式的分区的～
swapon /tmp/newdisk 启用。。。swapoff /tmp/newdisk关闭启用的
————————————
umount	-l强制卸载（难卸载的，类似win的无法删除U盘一样）    挂载点如/data或者分区名/dev/sdb2...
blkid		显示分区uuid,在linux中，每个分区有唯一的uuid,用这个uuid挂载磁盘，不会出现因为插反sdb,c反掉，挂载以这判断，挂载不正确
mount 	[-a会把/etc/fstab中出现的所有磁盘分区挂载上。这样，增加一行后，可以运行这个，不用重启啦～] dev/***  /文件夹
				[-o指定你想要的选项]如mount -o remount,ro,sync,noauto /dev/hdb1 /test1(不加任何选项就是defaults)
				mount UUID="***" /***这样挂载更好。。。
				-t  (指定文件系统的类型) 软盘vfat  光盘iso9660（目前的系统都是智能识别的，即，用不着指定，会自动判断。）
/etc/fstab可以自己修改，增加一生来挂载新增分区，如/dev/hdb1 /test1 ext3 defaults 0 0 再重启就会挂载这个分区了。
fdisk linux下的硬盘分区工具—————————————————
fdisk 		[-l] [设备名称]不加设备名会直接列出系统中所有的磁盘设备以及分区表，指定设备名称则列出此设备的分区表。不加-l进入另一模式～
进入后，p打鱼当前磁盘的分区情况。n重新建立一个新的分区。w保存操作。q退出。d删除一个分区。
mkfs.ext/mkfs.ext3/mke2fs格式化linux硬盘分区（有mkfs.bfs/ntfs/xfs/hfs/ext4/vfat等等等等很多）
-b:设定每个数据区块占用空间大小，目前支持1024,2048,4096bytes/块
-i：设定inode大小
-N:设定inode数量，有时使用默认的inode数不够 用，所以，要自定inode数量。。。。
-c：在格式化前先检测磁盘是否有问题，加上这个后，会～非常～慢～
-L:预设该分区的标签label
-j：建立ext3格式的分区，如果使用mkfs.ext3就不用加这个选项了。。。。
mkfs.ext3 /dev/hdb1 不加任何选项，直接格式化/dev/hdb1
mkfs.ext3 -b 4096 -i 4096 /dev/hdb2  设定-b和-i
mkfs.ext3 -L label2 /dev/hdb2  自定义分区label标签
e2label /dev/hdb2 查看分区label ,后面跟上标签名，则修改成这个。。。
fsck [-A不用跟分区名，自动检查/etc/fstab文件下的所有分区（开机就会执行一次） a自动修复问题 r有坏道是让用户决定修复与否] [分区] 
使用fsck检查磁盘有无坏道时,会提示用户“跑这个任务可能会导致某些挂载的文件系统损坏”,所以这个命令不要轻易运行。否则真的遇到问题,系统甚至都不能启动了。
—————————————————————————————
du			[-a全部 b以bytes为单位 c最后加总 -km以KBMB输出 s只列出总和 h系统自动调节单位] filename：常用du –sh filename
df				[-i使用inodes显示结果-h使用合适的单位显示-k-m分别为使用KM为单位显示]查看已挂载磁盘的总/使用/剩余容量等。
su 			[-] username切换用户，普通用户su不加username就是切换到root（加上-会连同用户的环境变量一起切换过来）root到别的不要密码
sudo		防止root密码被别的用户泄漏，使用其执行一个root才能执行的使命，输入自己的密码。普通用户需要root预先设定。
visudo		编辑/etc/sudoers。root ALL=(ALL) ALL,name ALL=(ALL) ALL，就让name用户拥有了sudo的权力。也可以让某组的用户者都有。
user privilege特权 specification规格，说明书，详述
members 成员 admin管理 gain增加     

passwd	不跟用户名是更改当前用户密码，否则，更改指定用户密码。
chfn 	username 更改用户的finger(第5字段，名字，地址，电话等等那个。。）
mkdir 	[-mp(递归创建）] [目录名称]
rmdir 	-p （递归）。。。
rm 		-r（目录）i（提示）f（强制） 。。。
which 	用来查找一个命令的绝对路径
alias		[别名]=[指令名称],而用绝对路径的/bin/rm 则不会被alias
echo	其实就是打印的意思,而PATH前面的＄表示后面接的是变量。LOGNAME变量-当前登录用户名。
cp 		[-r目录d链接i覆盖u更新] [ 源文件 ] [目标文件]
touch 	如果有这个文件,改变文件的访问时间,没有就创建文件。
>			重定向,把前面产生的输出覆盖写入到后面的文件中。>>追加
mv 		[ -i提示u更新 ] [源文件] [目标文件]（重命名也是用这个。。。）
cat 		-n显行号A显示所有东西（特殊字符）tac反向打印。。。
more 	可翻页，less可上下翻页。。。/word查找word		？word上搜word
head	显前10行，-n显前n行	tail(尾巴)显后10行，-n显后n行f动态显后10行
-     rwx rwx rwx  1  endian  endian  8  11月  1  16:18  ee
类型 主   组    他 inode 属主  属组   大小 最近修改日期 文件名
>d目录    -普通    l连接    b块设备    c串行    s套接字（对目录d，打开即执行）
chgrp 	[组名] [文件名]  chown [-R递归更改]  账户名 文件名    chown [ -R ] 账户名:组名 文件名
groupadd	[-g GID指定gid] group_name增加一个组(groupdel group_name删除一个组) (userdel [-r连家目录同删] username)删除用户
useradd		[-u UID指定uid][-g GID使其属于已在的某GID][-d HOME自定义家目录][-M不建立家目录][-s自定义shell]增加一个账户
chmod 		[-R递归更改] xyz 文件名（linux,默认目录的权限为 755,而文件的默认权限为644.）
chmod u=rwx,og=rx 文件名    chmod [u/g/o/a][+/-][r/w/x] 文件名
umask ×××（777目录/666文件）-×××的权限=剩下的权限。r4  w2  x1（默认新文件权限设定）
chattr 	[+-=][ASaci [文件或者目录名] ：A加则atime不可改，S加则将数据同步写入磁盘，a加则只能追加不能删除-root专享
																c自动压缩读取时自动解压，i加则不能被删，不能重命名,设定连接，写入，新增数据;（固化了。。。）
lsattr 	[-a同ls的R连同子目录的。。。] [文件/目录名]  
whereis [-b只找binary文件  m只找说明文件manual路径下的文件  s只找source来源文件  u没有说明档的文件] [文件名称]
locate	类似于whereis，可以使用updatedb 命令立即生成(更新)这个库。
find 		[路径] [参数] -atime +n 访问/执行时间大于n天的文件 -ctime +n 写入/更改inode属性时间大于n天的文件 -mtime +n 写入时间大于n天的
							-name filename,  -type type,f文件,b块设备,c串行,d目录,l连接,s套接字...
				Access time,atime 是在读取文件或者执行文件时更改的。Modified time,mtime 是在写入文件时随文件内容的更改而更改的。
				Create time,ctime 是在写入文件、更改所有者、权限或链接设置时随 Inode 的内容更改而更改的。（ls -l)
		更改文件的内容即会更改 mtime 和 ctime,但文件的 ctime 可能会在mtime 未发生变化时更改,例,更改文件的权限,但是文件内容没有变化。
ln 		[-s不加就是硬链接] [来源文件] [目的文件] 
——————————————————————————————————————————————————————————





知识————————————————————————————————————————————————————————
1
使用者在shell环境中可以操作的命令或可运行文件
2
系统核心可呼叫的函数与工具等
3
一些常用的函数(function)与函式库(library),大部分为C的函式库(libc)
4
装置文件的说明,通常在/dev下的文件
5
配置文件或者是某些文件的格式
6
游戏(games)
7
惯例与协议等
8
系统管理员可用的管理命令
9
跟kernel有关的文件

克服重新引导系统的习惯。
linux中，文件后缀没有具体意义，只是为了区分，爱好者们习惯加个后缀名。。。有些软件会这样要求，但linux没有，类型是在属性里，隐藏是.
一文件在块内，占用至少一个inode，记录属性及在哪一个block之内，找文件，先找inode看，再到他在的数据区找到取出利用。划好的，比block大一些，一个1GB的，以8K规划inode，就有131072个inode,128b这么大一个。一个partition格式化，一定会有inode table,data area。
（一个inode与一个block最多均只记录一个档案，再小也要占用一个block！！！）
hard link 是直接再建立一个inode连接到文件放置的块区域。因为增加的inode会连接到块区域,而目录本身仅仅消耗inode而已,那么hard link就不能连接目录了。hard link 有两个限制:1 不能跨文件系统,因为不同的文件系统有不同的inode table; 2 不能连接目录。
Symbolic Links建立一个独立的文件，当读取这个连接文件时,它会把读取的行为转发到该文件所link的文件上

passwd分析：以“：”分成7个字段，口令，早期unix系统口令确实是放在这里，后来基于安全因素，放到/etc/shadow中了，这里用×代替

用户名：口令：uid：gid：注释：家目录：shell 		例：endian:x:1000:1000:恩典:/home/endian:/bin/bash

系统通过uid来识别用户身份0～65535。0为root，1-499由系统保留为管理账号，普通用户从500开始。gid对应/etc/group中一条记录，两文件类似。。。注释无实际意义，通常记录用户一些属性，如姓名，电话等等。家目录为用户登录时处的目录，可改哦。shell为/sbin/nologin禁用。

/etc/shadow分析：用"：“分成9个字段
		用户名：用户密码		：上次改密日期	：过几天准改密：密码几天后到期：密码到期前警告期限：账号失效期限：账号生命周期：保留
例：endian	:加密过的密码	  :17078				 :	0					  :99999				  :7					 			:						 :						  :
和/etc/passwd对应的。。。用户密码是已经加密过的了，但有些人能解密，所以，为了安全，文件属性设置为600,只允许root读写。改密日期的计算是距离1970年1月1日到上次改的日期，365×年数=天数～准改密默认为0,不限制。多少天内必须改密，否则不能登陆，默认99999,可理解为永远不需要改。。。警告期限，若为7,你的密码要在7天后到期。失效期限如果为3,密码到期，过3天，账号锁定。生命周期算法和上次改密日期一样，这日期前可用，到后，废。保留用的～没什么意义。
在挂载某个分区前需要先建立一个挂载点,这个挂载点是以目录的形式出现的。一旦把某一个分区挂载到了这个挂载点(目录)下,那么再往这个目录写数据使,则都会写到该分区中。这就需要你注意一下,在挂载该分区前,挂载点(目录)下必须是个空目录。其实目录不为空并不影响所挂载分区的使用,但是一旦挂载上了,那么该目录下以前的东西就不能看到了。只有卸载掉该分区后才能看到。
这个文件是系统启动时,需要挂载的各个分区。第一列就是分区的label;第二列是挂载点;第三列是分区的格
式;第四列则是mount的一些挂载参数,等下会详细介绍一下有哪些参数,一般情况下,直接写defaults即
可;第五列的数字表示是否被dump备份,是的话这里就是1,否则就是0;第六列是开机时是否自检磁盘,就是
刚才讲过的那个fsck检测。1,2都表示检测,0表示不检测,在Redhat中,这个1,2还有个说法,/ 分区必须设
为1,而且整个fstab中只允许出现一个1,这里有一个优先级的说法。1比2优先级高,所以先检测1,然后再检测
2,如果有多个分区需要开机检测那么都设置成2吧,1检测完了后会同时去检测2。下面该说说第四列中常用到的
参数了。
async/sync :async表示和磁盘和内存不同步,系统每隔一段时间把内存数据写入磁盘中,而sync则会时时同
步内存和磁盘中数据;
auto/noauto :开机自动挂载/不自动挂载;
default:按照大多数永久文件系统的缺省值设置挂载定义,它包含了rw, suid, dev, exec, auto, nouser,async
;
ro:按只读权限挂载;
rw:按可读可写权限挂载;
exec/noexec :允许/不允许可执行文件执行,但千万不要把根分区挂载为noexec,那就无法使用系统了,连m
ount命令都无法使用了,这时只有重新做系统了;
user/nouser :允许/不允许root外的其他用户挂载分区,为了安全考虑,请用nouser ;
suid/nosuid :允许/不允许分区有suid属性,一般设置nosuid ;
usrquota :启动使用者磁盘配额模式,磁盘配额相关内容在后续章节会做介绍;
grquota :启动群组磁盘配额模式;
学完这个/etc/fstab后,我们就可以自己修改这个文件,增加一行来挂载新增分区。例如,笔者增加了这样一行
/dev/hdb1 /test1 ext3 defaults 0 0
/etc/rc.d/rc.local，（/etc/rc.local...)系统启动完成后会执行这个文件中的命令。所以只要你想开机后运行什么命令统统写入到这个文件下面吧。
脚本中#多表示注释的意思，代表这行在这个脚本中不生效。
磁盘配合其实就是给每个用户分配一定的磁盘额度,只允许他使用这个额度范围内的磁盘空间。在linux系统
中,是多用户多任务的环境,所以会有很多人共用一个磁盘的情况。针对每用户去限定一定量的磁盘空间是有必要的,这样才显得公平。
在linux中,用来管理磁盘配额的东西就是quota了。
quota在实际应用中是针对整个分区进行限制的。如果你的/dev/hda3 是挂载在/home 目录下的,那么/home 所有目录都会受到限制。
VIM：vim的三种模式:一般模式、编辑模式、命令模式。
* 一般模式:当你vim filename 编辑一个文件时,一进入该文件就是一般模式了。在这个模式下,你可以做的操作有,上下移动光标;删除某个字符;删除某行;复制、粘贴一行或者多行。
* 编辑模式:一般模式下,是不可以修改某一个字符的,只能到编辑模式了。从一般模式进入编辑模式,只需你按一个键即可(i,I,a,A,o,O,r,R)。当进入编辑模式时,会在屏幕的最下一行出现“INSERT或REPLACE”的字样。从编辑模式回到一般模式只需要按一下键盘左上方的ESC键即可。
* 命令模式:在一般模式下,输入”:”或者”/”即可进入命令模式。在该模式下,你可以搜索某个字符或者字符串,也可以保存、替换、退出、显示行号等等。
——————————
学习shell脚本之前的基础知识：
实际上,在shell和计算机硬件之间还有一层东西那就是系统内核了。
/etc/profile:这个文件预设了几个重要的变量,例如PATH, USER, LOGNAME, MAIL, INPUTRC, HOSTNAME,HISTSIZE, umas等等。
/etc/bashrc :这个文件主要预设umask以及PS1。这个PS1就是我们在敲命令时,前面那串字符了,例如笔者的linux系统PS1就是 [root@localhost ~]# ,你不妨看一下PS1的值。
除了两个系统级别的配置文件外,每个用户的主目录下还有几个这样的隐藏文件:
.bash_profile:定义了用户的个人化路径与环境变量的文件名称。每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次。
.bashrc:该文件包含专用于你的shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。例如你可以将用户自定义的alias或者自定义变量写到这个文件中。
.bash_history:记录命令历史用的。
.bash_logout :当退出shell时,会执行该文件。可以把一些清理的工作放到这个文件中。
* :代表零个或多个字符或数字。
? :只代表一个任意的字符
# :这个符号在linux中表示注释说明的意思,即”#”后面的内容linux忽略掉。
在命令的开头或者中间插入”#” ,linux都会忽略掉的。这个符号在shell脚本中用的很多。
\:脱意字符,将后面的特殊符号(例如”*” )还原为普通字符。
| :管道符,前面多次说过,它的作用在于将符号前面命令的结果丢给符号后面的命令。这里提到的后面的命令,并不是所有的命令都可以的,一般针对文档操作的命令比较常用,例如cat, less, head, tail, grep, cut, sort, wc, uniq, tee, tr, split, sed, awk等等,其中grep, sed, awk为正则表达式必须掌握的工具
$ :除了用于变量前面的标识符外,还有一个妙用,就是和’!’结合起来使用。
‘!$’表示上条命中中最后一个变量(也许称为变量不合适,总之就是上条命令中最后出现的那个东西)例如上边命令最后是test.txt那么在当前命令下输入!$则代表test.txt。
2>>:前面讲过重定向符号> 以及>> 分别表示取代和追加的意思,然后还有两个符号就是这里的2> 和 2>> 分别表示错误重定向和错误追加重定向,当我们运行一个命令报错时,报错信息会输出到当前的屏幕,如果想重定向到一个文本里,则要用2>或者2>>
——————————
正则表达式：
其实正则表达式,只是一种思想,一种表示方法。只要我们使用的工具支持表示这种思想那么这个工具就可以处理正则表达式的字符串。常用的工具有grep, sed, awk 等
上面也提到了awk和sed一样是流式编辑器,它也是针对文档中的行来操作的,一行一行的去执行。awk比sed更加强大,它能做到sed能做到的,同样也能做到sed不能做到的。awk工具其实是很复杂的,有专门的书籍来介绍它的应用,但是笔者认为学那么复杂没有必要,只要能处理日常管理工作中的问题即可。何必让自己的脑袋装那么东西来为难自己?毕竟用的也不多,即使现在教会了你很多,你也学会了,如果很久不用肯定就忘记了。鉴于此,笔者仅介绍比较常见的awk应用,如果你感兴趣的话,再去深入研究吧。
首先它是一个脚本,并不能作为正式的编程语言。因为是跑在linux的shell中,所以叫shell脚本。说白了,shell脚本就是一些命令的集合。举个例子,我想实现这样的操作:1)进入到/tmp/目录;2)列出当前目录中所有的文件名;3)把所有当前的文件拷贝到/root/目录下;4)删除当前目录下所有的文件。简单的4步在shell窗口中需要你敲4次命令,按4次回车。这样是不是很麻烦?当然这4步操作非常简单,如果是更加复杂的命令设置需要几十次操作呢?那样的话一次一次敲键盘会很麻烦。所以不妨把所有的操作都记录到一个文档中,然后去调用文档中的命令,这样一步操作就可以完成。其实这个文档呢就是shell脚本了,只是这个shell脚本有它特殊的格式。
有一个问题需要约定一下,凡是自定义的脚本建议放到/usr/local/sbin/目录下,这样做的目的是,一来可以更好的管理文档;二来以后接管你的管理员都知道自定义脚本放在哪里,方便维护。
test.sh中第一行一定是 “#! /bin/bash”它代表的意思是,该文件使用的是bash语法。如果不设置该行,那么你的shell脚本就不能被执行。’#’表示注释,在前面讲过的。后面跟一些该脚本的相关注释内容以及作者和创建日期或者版本等等。当然这些注释并非必须的,如果你懒的很,可以省略掉,但是笔者不建议省略。
linux系统日常管理
08:26:44 up 13:29,  1 user,  load average: 0.23, 0.46, 0.54
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
endian   tty8     :0               三18   13:28m  5:59   0.52s cinnamon-session --session cinnamon
w：load average平均负载，1min,5min,15min，单位时间段内的cpu活动进程数。越大压力越大，一般不超过cpu数量就没关系。如果cpu数量为8,小于8说明服务器没有压力。
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 2  0 113024  25512  89264 386352    1    6    65    75 1244  280 37  8 53  2  0
vmstat：
procs显示进程相关信息，r表示运行和等待cpu时间片的进程数，如果长期大于服务器cpu,则说明cpu不够用了。b表示等待资源的进程数，比如等待I/O，内存等，这列的值如果长时间大于1,则需要关注下了。
memory内内存相关信息，swpd表示切换到交换分区的内在数量，free表示空闲的内存数量，buff缓冲大小（即将写入磁盘的），cache缓存大小（从磁盘中读取的）。
swap内存交换情况，si由内存进入交换区的数量，so由交换区进入内存的数量。
io磁盘使用情况，bi从块设备读取数据的量（读磁盘），bo从块设备写入数据的量（写磁盘）。
system显示采集间隔内发生的中断次数，in表示在某一时间间隔中观测到的每秒设备中断数，cs表示每秒产生的上下文切换次数。
cpu显示cpu的使用状态，us显示用户花费cpu时间的百分比，sy显示系统花费cpu时间的百分比，id表示cpu牌空闲状态的时间百分比，wa表示I/O等待占用cpu时间的百分比，st表示被偷走的cpu所占百分比（一般为0,不用关注。）×r,b,wa,bi,bo×.si,so数值高，且在不断变化，说明内存不够用了，使用交换分区，对系统性能影响极大。
top命令用于动态监控进程所占系统资源，每3s一变，特点是把占用系统资源最高的进程放到最前面。top命令打印出了很多信息,包括系统负载(load average)、进程数(Tasks)、cpu使用情况、内存使用情况以及交换分区使用情况。其实上面这些内容可以通过其他命令来查看,所以用top重点查看的还是下面的进程使用系统资源详细状况。这部分东西反映的东西还是比较多的,不过需要你关注的也就是几项:%CPU, %MEM, COMMAND
sar -f 文件名/var/log/sa/目录下的库文件 -q历史负载
-n DEV,IFACE这列表示设备名称,rxpck/s 表示每秒进入收取的包的数量,txpck/s 表示每秒发送出去的包的数量,rxbyt/s 表示每秒收取的数据量(单位Byte),txbyt/s表示每秒发送的数据量。后面几列不需要关注。如果有一天你所管理的服务器丢包非常严重,那么你就应该看一看这个网卡流量是否异常了,如果rxpck/s 那一列的数值大于4000,或者rxbyt/s那列大于5,000,000则很有可能是被攻击了,正常的服务器网卡流量不会高于这么多,除非是你自己在拷贝数据。
系统初始化时,就已经分配出很大一部分内存给缓存,这部分缓存用来随时提供给程序使用,如果程序不用,那这部分内存就空闲。
PID:进程的id,这个id很有用,在linux中内核管理进程就得靠pid来识别和管理某一个程,比如我想终止某一个进程,则用 ‘kill 进程的pid’,有时并不能杀掉,则需要加一个-9选项了’kill -9 进程pid’
STAT :表示进程的状态,进程状态分为以下几种(不要求记住,但要了解)
D 不能中断的进程(通常为IO)
R 正在运行中的进程
S 已经中断的进程,通常情况下,系统中大部分进程都是这个状态
T 已经停止或者暂停的进程,如果我们正在运行一个命令,比如说sleep 10,如果我们按一下ctrl -z 让他暂停,那么我们用ps查看就会显示T这个状态
W 这个好像是说,从内核2.6xx 以后,表示为没有足够的内存页分配
X 已经死掉的进程(这个好像从来不会出现)Z 僵尸进程,杀不掉,打不死的垃圾进程,占系统一小点资源,不过没有关系。如果太多,就有问题了。一般不会出现。
< 高优先级进程N 低优先级进程
L 在内存中被锁了内存分页
s 主进程l 多线程进程+ 代表在前台运行的进程
在windows下设置IP非常简单,然而在命令窗口下如何设置?这就需要去修改配置文件/etc/sysconfig/network-scripts/ifcfg-eth0了,如果是eth1那么配置文件是/etc/sysconfig/network-scripts/ifcfg-eth1.修改后，需要重启网络服务新IP才能生效。service network restart...
把ifcfg-eth0复制成ifcfg-eth0:1 然后编辑ifcfg-eth0:1修改DEVICE以及IPADDR保存后重启网卡。再查看eth0上就有两个IP了。注意：文件名写成什么无所谓，文件内的DEVICE=eth0:1一定要按照这样的格式写，否则启示不起来网卡。
iptalbes
iptalbes的三个表
filter :这个表主要用于过滤包的,是系统预设的表,这个表也是笔者用的最多的。内建三个链INPUT、OUTPUT以及FORWARD。INPUT作用于进入本机的包;OUTPUT作用于本机送出的包;FORWARD作用于那些跟本机无关的包。
nat :主要用处是网络地址转换,也有三个链。PREROUTING 链的作用是在包刚刚到达防火墙时改变它的目的地址,如果需要的话。OUTPUT链改变本地产生的包的目的地址。POSTROUTING链在包就要离开防火墙之前改变其源地址。该表笔者用的不多,但有时候会用到。
mangle :这个表主要是用于给数据包打标记,然后根据标记去操作哪些包。这个表几乎不怎么用。除非你想成为一个高级网络工程师,否则你就没有必要花费很多心思在它上面。
假设你的机器上有两块网卡eth0和eth1,其中eth0的IP为10.0.2.68 ,eth1的IP为192.168.1.1 。eth0连接了intnet 但eth1没有连接,现在有另一台机器(192.168.1.2)和eth1是互通的,那么如何设置也能够让连接eth1的这台机器能够连接intnet(即能和10.0.2.68互通)?
echo "1" >/proc/sys/net/ipv4/ip_forward（打开路由转发功能）
iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0（出口网卡） -j MASQUERADE（表示伪装的意思）（对nat表做一个IP转发的操作）只要学会这个路由转发即可，其他交给网络工程师去学习吧，毕竟，你只是用用。。。
设定的防火墙规则只是保存在内存中，所以，设定好后要先保存一下。service iptables save。保存在iptables配置文件中。可以先备份这个，然后停止防火墙服务是service iptables stop。防火墙就生效了，但是一旦重新设定规则后，防火墙又开始工作了。还可以使用iptables-save>filename来保存一个防火墙规则，也可以直到备份的作用。恢复iptables-restore<myipt.rule。
实际上是打开了/var/spool/cron/username (如果是root则打开的是/var/spool/cron/root)这个文件。使用的是vim编辑器,所以要保存的话则在命令模式下输入:wq即可。但是,你千万不要直接去编辑那个文件,因为可能会出错,所以一定要使用crontab -e来编辑。

1. 每天凌晨1点20分清除/var/log/slow.log这个文件;
2. 每周日3点执行’/bin/sh /usr/local/sbin/backup.sh’;
3. 每月14号4点10分执行’/bin/sh /usr/local/sbin/backup_month.sh’;
4. 每隔8小时执行’ntpdate time.windows.com’;
5. 每天的1点,12点,18点执行’/bin/sh /usr/local/sbin/test.sh’;
6. 每天的9点到18点执行’/bin/sh /usr/local/sbin/test2.sh’;
答案:
1. 20 1 * * * echo “”>/var/log/slow.log
2. 0 30 * * 0 /bin/sh /usr/local/sbin/backup.sh
3. 10 04 14 * * /bin/sh /usr/local/sbin/backup_month.sh
4. 0 */8 * * * ntpdate time.windows.com
5. 0 1,12,18 * * /bin/sh /usr/local/sbin/test.sh
6. 0 9-18 * * * /bin/sh /usr/local/sbin/test2.sh
Cron的这部分内容并不难,你只要会了这6道练习题,你就算掌握它了。这里要简单说一下,每隔8小时,就是用全部小时(0-23)去除以8,你仔细想一下结果,其实算出来应该是0,8,16三个数。当遇到多个数(分钟、小时、月、周)例如第5题,则需要用逗号隔开。而时间段是可以用’-‘的方式表示的。等设置好了所有的计划任务后需要查看一下crond服务是否启动,如果没有启动,需要启动它。
service crond status
/etc/crontab系统本身的计划任务
统预设服务都是可以通过这样的命令实现 ‘service服务名 start|stop|restart’ ,这里的服务名就是/etc/init.d/目录下的这些文件了。除了可以使用’service crond start ‘启动crond外,还可以使用/etc/init.d/crond start 来启动。
rsync 从字面上的意思你可以理解为remote sync(远程同步)这样可以让你理解的更深刻一些。Rsync不仅可以远程同步数据(类似于scp),当然还可以本地同步数据(类似于cp),但不同于cp或scp的一点是,rsync不像cp/scp一样会覆盖以前的数据(如果数据已经存在),它会先判断已经存在的数据和新数据有什么不同,只有不同时才会把不同部分覆盖掉。rsync -arv 123 /tmp/123上面例子表示把当前目录下的123同步到/tmp/目录下,并且同样也命名为123。如果是远程拷贝的话就是这样的形式了 IP:path (如:10.0.2.34:/root/)rsync -arv 123 10.0.2.34:/root/
rsync的命令格式
rsync [OPTION]... SRC DEST
rsync [OPTION]... SRC [USER@]HOST:DEST
rsync [OPTION]... [USER@]HOST:SRC DEST
rsync [OPTION]... [USER@]HOST::SRC DEST
rsync [OPTION]... SRC [USER@]HOST::DEST
笔者在一开始举的两个例子,第一个例子即为第一种格式,第二个例子即为第二种格式,但不同的是,笔者并没有加user@host 如果不加默认指的是root 。第三种格式是从远程目录同步数据到本地。第四种以及第五种格式使用了两个冒号,这种方式和前面的方式的不同在于验证方式不同
-a:归档模式,表示以递归方式传输文件,并保持所有属性,等同于-rlptgoD ,-a选项后面可以跟一个 --no-OPTION 这个表示关闭-rlptgoD中的某一个例如 -a --no-l 等同于-rptgoD
-v :打印一些信息出来,比如速率,文件数量等
-l :保留软链结
-L :向对待常规文件一样处理软链结,如果是SRC中有软连接文件,则加上该选项后将会把软连接指向的目标文件拷贝到DST
-p :保持文件权限
-o :保持文件属主信息
-g :保持文件属组信息
-D :保持设备文件信息
-t :保持文件时间信息
--delete :删除那些DST中SRC没有的文件
--exclude=PATTERN:指定排除不需要传输的文件,等号后面跟文件名,可以是万用字符模式(如*.txt)
-u :加上这个选项后将会把DST中比SRC还新的文件排除掉,不会覆盖
想把test1目录，拷贝成test2，却新建test2然后放进去了test1。加一个斜杠就好了（test1下的到test2下）,所以笔者建议你在使用rsync备份目录时要养成加斜杠的习惯。
平时你使用rsync同步数据的时候,使用-a选项基本上就可以达到我们想要的效果了
上面介绍的5种方式当中,第二、第三(1个冒号)就属于通过ssh的方式,这种方式其实就是让用户去登录到远程机器,然后执行rsync的任务。
rsync -avl rsync/test1/ root@10.0.2.69:/root/test2/root@10.0.2.69's password:这种方式就是前面介绍的第二种方式了,是通过ssh拷贝的数据,是要输入10.0.2.69那台机器root的密码的。
rsync -avl root@10.0.2.69:/root/test/ rsync/test3/root@10.0.2.69's password:这个则为第三种方式。这两种方式如果写到脚本里,备份起来就有麻烦了,因为要输入密码,脚本本来就是自动的,不可能做到的。但是不代表没有解决办法。那就是通过密钥验证,密钥不设立密码就ok了。
先提前说一下基本的主机信息: 10.0.2.68 (主机名Aming-1)和10.0.2.69(主机名Aming)需要从Aming-1上拷贝数据到Aming上。
A. 确认Aming-1上是否有这个文件 /root/.ssh/id_rsa.pub——ssh-keygen生成
在这个过程中会有一些交互的过程,因为笔者的/root/.ssh/id_rsa已经存在,所以会问是否覆盖,笔者选择覆盖,然后会提示要输入这个密钥的密码,出于安全考虑应该定义个密码,但是我们的目的就是为了自动化同步数据,所以这里不输入任何密码,直接按回车,即密码为空。最后则生成了私钥(/root/.ssh/id_rsa)和公钥文件(/root/.ssh/id_rsa.pub)
B. 把公钥文件的内容拷贝到目标机器上。cat /root/.ssh/id_rsa.pub内容到vim /root/.ssh/authorized_keys。这一步也许你会遇到/root/.ssh目录不存在的问题,可以手动创建,并修改目录权限为700也可以执行ssh-keygen命令生成这个目录。保存/root/.ssh/authorized_keys文件后,再到主机Aming-1上执行ssh 10.0.2.69。现在不用输入密码也可以登录主机Aming了。下面再从主机Aming-1上执行一下rsync命令试试吧。rsync -avl rsync/test1/ root@10.0.2.69:/root/test2/
这种方式可以理解成这样,在远程主机上建立一个rsync的服务器,在服务器上配置好rsync的各种应用,然后本机作为rsync的一个客户端去连接远程的rsync服务器。下面笔者就介绍一下,如何去配置一台rsync服务器。（真用的时候再学吧。。。）
日志主要的功能有:审计和监测。他还可以实时的监测系统状态,监测和追踪侵入者等等。笔者常查看的日志文件为/var/log/message. 它是核心系统日志文件,包含了系统启动时的引导消息,以及系统运行时的其他状态消息。IO 错误、网络错误和其他系统错误都会记录到这个文件中。另外其他信息,比如某个人的身份切换为 root以及用户自定义安装的软件(apache)的日志也会在这里列出。通常,/var/log/messages是在做故障诊断时首先要查看的文件。
系统有一个日志轮询的机制,每星期切换一个日志,变成message.1, message.2,...messages.4 连同message一共有5个这样的日志文件。这是通过logrotate工具的控制来实现的,它的配置文件是/etc/logrotate.conf. 如果没有特殊需求请不要修改这个配置文件。
/var/log/message是由syslogd这个守护进程产生的,如果停掉这个服务则系统不会产生/var/log/messag
e,所以这个服务不要停。Syslogd服务的配置文件为/etc/syslog.conf这个文件定义了日志的级别
除了关注/var/log/message外,你还应该多关注一下’dmesg’这个命令,它可以显示系统的启动信息,如果你的某个硬件有问题(比如说网卡)用这个命令也是可以看到的。
ls 123.txt |xargs cat把管道符前面的输出作为xargs 后面的命令的输入。它的好处在于可以把本来两步或者多步才能完成的任务简单一步就能完成。xargs常常和find命令一起使用,比如,查找当前目录创建时间大于10天的文件,然后再删除。
find ./ -mtime +10 |xargs rm （-r这样也行）
find ./ -mtime +10 -exec rm -rf {}(作为find出来的文件的替代符) \;（转意，不然shell会把分号作为命令的结尾）
现在我有一个这样的需求,查找当前目录下所有.txt的文件,然后把这些.txt的文件变成.txt_bak 。ls *.txt |xargs -n1 -i{} mv {} {}_bak(xargs -n1(一个一个对象的去处理) -i{}(把前面的对象用{}取代)类似for)mv {} {}_bak相当于mv 1.txt 1.txt_bak
需要执行一个命令或者脚本,但是需要几个小时甚至几天。这就要考虑一个问题,就是中途断网或出现其他意外情况,执行的任务中断了怎么办?你可以把命令或者脚本丢到后台运行,不过也不保险。笔者下面就介绍两种方法来避免这样的问题发生。
nohup sh /usr/local/sbin/test.sh &。直接加一个’&’虽然丢到后台了,但是当退出该终端时很有可能这个脚本也会退出的,而在前面加上’nohup’就没有问题了。nohup的作用就是不挂断地运行命令。
screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。screen中有会话的概念,用户可以在一个screen会话中创建多个screen窗口,在每一个screen窗口中就像操作一个真实的SSH连接窗口那样。下面笔者介绍screen的一个简单应用。1)打开一个会话,直接输入screen命令然后回车,进入screen会话窗口。2)screen -ls 查看已经打开的screen会话3)Ctrl +a 再按d退出该screen会话,只是退出,并没有结束。结束的话输入Ctrl +d 或者输入exit4)退出后还想再次登录某个screen会话,使用screen -r [screen 编号]。只一个screen会话时,后面的编号是可以省略的。当你有某个需要长时间运行的命令或者脚本时就打开一个screen会话,然后运行该任务。按ctrl +a 再按d退出会话,不影响终端窗口上的任何操作。
'ntpdate timeserver' 这里的timeserver为时间服务器的IP或者hostname,常用的timeserver有210.72.145.44, time.windows.com(windows的时间服务器)。如果你想每隔6小时同步一次那么请指定一个计划任务。00 */6 * * * /usr/sbin/ntpdate 210.72.145.44 >/dev/null之所以在后面加一个重定向,是因为这个同步的过程是有内容输出的,因为我们的计划任务是在后台执行的,输出的内容会以邮件的形式发送给用户,所以为了避免邮件太多请输出到/dev/null (在linux下这个设备是虚拟的存在,你可以理解为空洞)
LAMP：Linux Apache MySQL PHP组合，WEB服务器。。。
LNMP：Linux Nginx MySQL PHP，Nginx类似于Apache的一种WEB服务软件
Squid是比较知名的代理软件,它不仅可以跑在linux上还可以跑在windows以及Unix上,它的技术已经非常成熟。目前使用Squid的用户也是十分广泛的。Squid与Linux下其它的代理软件如Apache、Socks、TIS FWTK和delegate相比,下载安装简单,配置简单灵活,支持缓存和多种协议。 Squid的缓存功能相当好用,不仅可以减少带宽的占用,同样也大大降低了后台的WEB服务器的磁盘I/O的压力。Squid接收用户的下载申请,并自动处理所下载的数据。也就是说,当一个用户象要下载一个主页时,它向Squid发出一个申请,要Squid替它下载,然后Squid 连接所申请网站并请求该主页,接着把该主页传给用户同时保留一个备份,当别的用户申请同样的页面时,Squid把保存的备份立即传给用户,使用户觉得速度相当快。 Squid将数据元缓存在内存中,同时也缓存DNS查寻的结果,除此之外,它还支持非模块化的DNS查询,对失败的请求进行消极缓存。Squid支持SSL,支持访问控制。由于使用了ICP,Squid能够实现重叠的代理阵列,从而最大限度的节约带宽。 Squid对硬件的要求是内存一定要大,不应小于128M,硬盘转速越快越好,最好使用服务器专用SCSI 硬盘,处理器要求不高,400MH以上既可
目前有很多网站使用jsp的程序编写,所以解析jsp的程序就必须要有相关的软件来完成。Tomcat就是用来解析jsp程序的一个软件, Tomcat是Apache 软件基金会(Apache Software Foundation)的Jakarta 项目中的一个核心项目,由Apache、Sun 和其他一些公司及个人共同开发而成。因为Tomcat 技术先进、性能稳定,而且免费,因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可,成为目前比较流行的Web 应用服务器。 Tomcat 是一个轻量级应用服务器,在中小型系统和并发访问用户不是很多的场合下被普遍使用,是开发和调试JSP 程序的首选。对于一个初学者来说,可以这样认为,当在一台机器上配置好Apache 服务器,可利用它响应对HTML 页面的访问请求。实际上Tomcat 部分是Apache 服务器的扩展,但它是独立运行的,所以当你运行tomcat 时,它实际上作为一个与Apache 独立的进程单独运行的。

以前我们在 Windows 上共享文件的话,只需右击要共享的文件夹然后选择共享相关的选项设置即可。然而如何实现 Windows 和 linux 的文件共享呢?这就涉及到了samba服务了

Nagios是一款用于监控系统和网络的开源应用软件,它的模式是服务器—客户端,也就是说首先要在在一台服务器上(server)部署相应的主要套件,然后在要监控的服务器上部署客户端程序,这样server会和client通信,从而监控client端的各项资源。Nagios功能十分强大几乎所有的项目都可以监控,大到服务器的存活状态,小到服务器上的某一个服务(web)。这些功能都是通过自定义插件(或者叫做脚本)来实现。当Nagios监控到某项资源发生异常会通知到用户,你可以接入手机短信接口也可以接入邮件接口。我们可以通过web页面来查看Nagios所监控的各项资源,默认搭建的Nagios服务器只能监控简单的几个项目,而其他服务之类的监控项目都是由我们自己开发的插件来实现的。

——————————————————————————
